/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.aldrin.pos.gui.dialog;

import com.aldrin.pos.gui.dialog.JDialogStockInEntryPerItem;
import com.aldrin.pos.data.dao.impl.CategoryDAOImpl;
import com.aldrin.pos.data.dao.impl.StockInDAOImpl;
import com.aldrin.pos.data.dao.impl.StockInEntryDAOImpl;
import com.aldrin.pos.data.dao.impl.TransporterDAOImpl;
import com.aldrin.pos.util.AddProductToTable;
import com.aldrin.pos.gui.JFrameAldrinPOS;
import com.aldrin.pos.gui.dialog.au.JDialogTransporterAU;
import com.aldrin.pos.model.Product;
import com.aldrin.pos.model.StockIn;
import com.aldrin.pos.model.StockInEntry;
import com.aldrin.pos.model.Transporter;
import com.aldrin.pos.model.Unit;
import com.aldrin.pos.model.UserAccount;
import com.aldrin.pos.util.ComboBoxList;
import com.formdev.flatlaf.FlatClientProperties;
import java.awt.Color;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.text.DecimalFormat;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author ALRIN B.C.
 */
public class JDialogStockInEntry extends javax.swing.JDialog implements MouseListener {

    /**
     * Creates new form JDialogStockInEntry
     */
    private JFrameAldrinPOS jFrameSariPOS;
    private static AddProductToTable aptt;
    private DecimalFormat df = new DecimalFormat("##,##0.00");

    public JDialogStockInEntry(JFrameAldrinPOS jFrameSariPOS, boolean modal) {
        super(jFrameSariPOS, modal);
        this.jFrameSariPOS = jFrameSariPOS;
        initComponents();
        comboBoxTransporter();
        setTable();
    }

    public JDialogStockInEntry(AddProductToTable addProductToTable) {
        aptt = addProductToTable;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel7 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBoxTransporter = new javax.swing.JComboBox<>();
        jButtonAddTransporter = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableStockInEntry = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jButtonRemove = new javax.swing.JButton();
        jButtonAddToTable = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabelGrandTotal = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButtonSave = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("STOCK-IN ENTRY");

        jPanel7.setPreferredSize(new java.awt.Dimension(964, 50));
        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel2.setPreferredSize(new java.awt.Dimension(964, 50));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("TRANSPORTER");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 10, 80, 30));

        jComboBoxTransporter.setPreferredSize(new java.awt.Dimension(72, 30));
        jPanel2.add(jComboBoxTransporter, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 10, 290, 30));

        jButtonAddTransporter.setText("+");
        jButtonAddTransporter.setMargin(new java.awt.Insets(1, 1, 1, 1));
        jButtonAddTransporter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddTransporterActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonAddTransporter, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 10, 40, 30));

        jPanel7.add(jPanel2, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel7, java.awt.BorderLayout.NORTH);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.BorderLayout());

        jTableStockInEntry.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTableStockInEntry);

        jPanel3.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel4.setPreferredSize(new java.awt.Dimension(964, 100));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButtonRemove.setText("Remove");
        jButtonRemove.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveActionPerformed(evt);
            }
        });
        jPanel4.add(jButtonRemove, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 50, 84, 30));

        jButtonAddToTable.setText("Add");
        jButtonAddToTable.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonAddToTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddToTableActionPerformed(evt);
            }
        });
        jPanel4.add(jButtonAddToTable, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 84, 30));

        jButton5.setText("Edit");
        jButton5.setEnabled(false);
        jButton5.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jPanel4.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 50, 84, 30));

        jLabelGrandTotal.setFont(new java.awt.Font("Courier New", 0, 24)); // NOI18N
        jLabelGrandTotal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelGrandTotal.setText("0.00");
        jPanel4.add(jLabelGrandTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(735, 10, 130, 30));

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("GRAND TOTAL");
        jPanel4.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 10, 120, 30));

        jButtonSave.setText("Save");
        jButtonSave.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });
        jPanel4.add(jButtonSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 50, 84, 30));

        jPanel8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 843, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel4.add(jPanel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 40, 845, -1));

        jPanel1.add(jPanel4, java.awt.BorderLayout.SOUTH);

        jPanel5.setPreferredSize(new java.awt.Dimension(10, 100));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 288, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel5, java.awt.BorderLayout.WEST);

        jPanel6.setPreferredSize(new java.awt.Dimension(10, 406));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 288, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel6, java.awt.BorderLayout.EAST);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        setSize(new java.awt.Dimension(891, 446));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAddTransporterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddTransporterActionPerformed
        JDialogTransporterAU transporter = new JDialogTransporterAU(jFrameSariPOS, true);
        transporter.setVisible(true);
        comboBoxTransporter();
    }//GEN-LAST:event_jButtonAddTransporterActionPerformed

    private void jButtonAddToTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddToTableActionPerformed
        aptt = null;
        JDialogStockInEntryPerItem perItem = new JDialogStockInEntryPerItem(jFrameSariPOS, true);
        perItem.setVisible(true);
        if (aptt != null) {
            addProductToTable();
            autoCalulateTable();
        }


    }//GEN-LAST:event_jButtonAddToTableActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        // Add StockIn
        // Add StockInEntry
        int response = JOptionPane.showConfirmDialog(jFrameSariPOS, "Are you sure to save the stock-in?", "Save stock-in", JOptionPane.YES_NO_OPTION);
        if (response == JOptionPane.YES_OPTION) {
            saveStockInEntry();

            this.dispose();
        }

    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jButtonRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveActionPerformed
        int numRows = jTableStockInEntry.getSelectedRows().length;
        for (int i = 0; i < numRows; i++) {
            tableModel.removeRow(jTableStockInEntry.getSelectedRow());
        }
        jButtonRemove.setEnabled(false);
    }//GEN-LAST:event_jButtonRemoveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButtonAddToTable;
    private javax.swing.JButton jButtonAddTransporter;
    private javax.swing.JButton jButtonRemove;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JComboBox<Object> jComboBoxTransporter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabelGrandTotal;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableStockInEntry;
    // End of variables declaration//GEN-END:variables
TransporterDAOImpl transporterDAOImpl = new TransporterDAOImpl();

    private void comboBoxTransporter() {
        transporterDAOImpl.comboBoxTransporter();
        jComboBoxTransporter.removeAllItems();
        for (ComboBoxList a : transporterDAOImpl.getList()) {
            this.jComboBoxTransporter.addItem(a);
        }
    }

    private CategoryDAOImpl roleDAOImpl = new CategoryDAOImpl();

    public DefaultTableModel tableModel = new DefaultTableModel(new Object[]{"STOCK IN ID", "PRODUCT ID", "UNIT ID", "#", "UNIT", "PRODUCT", "QUANTITY", "BUYING PRICE uf", "SELLING PRICE uf", "BUYING PRICE", "SELLING PRICE", "LINE TOTAL UF", "LINE TOTAL"}, 0) {
        public Class getColumnClass(int columnIndex) {
            if (columnIndex == 0) {
                return String.class;
            }
            switch (columnIndex) {
                case 1:
                    return String.class;
                case 2:
                    return String.class;
                case 3:
                    return Integer.class;
                case 4:
                    return String.class;
                case 5:
                    return String.class;
                case 6:
                    return Integer.class;
                case 7:
                    return Integer.class;
                case 8:
                    return Integer.class;
                case 9:
                    return Integer.class;
                case 10:
                    return Integer.class;
                case 11:
                    return Integer.class;
                case 12:
                    return Integer.class;
                default:
                    return String.class;
            }
        }

        public boolean isCellEditable(int row, int col) {
            if (col < 10) {
                return false;

            } else {
                return true;
            }
        }
    };
    private TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(tableModel);

    private void setTable() {
        jTableStockInEntry.setCellSelectionEnabled(true);
        jTableStockInEntry = new JTable(tableModel);
        jScrollPane1.setViewportView(jTableStockInEntry);
        jTableStockInEntry.addMouseListener(this);
        jTableStockInEntry.setRowSorter(sorter);
//"STOCK IN ID", "PRODUCT ID", "UNIT ID", "#", "UNIT", "PRODUCT", "QUANTITY", "BUYING PRICE UF", "SELLING PRICE UF", "BUYING PRICE", "SELLING PRICE", "LINE TOTAL UF", "LINE TOTAL"

        TableColumn[] column = new TableColumn[100];
        column[1] = jTableStockInEntry.getColumnModel().getColumn(1);
        column[1].setPreferredWidth(30);

        column[2] = jTableStockInEntry.getColumnModel().getColumn(2);
        column[2].setPreferredWidth(80);

        column[3] = jTableStockInEntry.getColumnModel().getColumn(3);
        column[3].setPreferredWidth(30);

        column[4] = jTableStockInEntry.getColumnModel().getColumn(4);
        column[4].setPreferredWidth(60);

        column[5] = jTableStockInEntry.getColumnModel().getColumn(5);
        column[5].setPreferredWidth(350);

        column[6] = jTableStockInEntry.getColumnModel().getColumn(6);
        column[6].setPreferredWidth(50);

        column[7] = jTableStockInEntry.getColumnModel().getColumn(7);
        column[7].setPreferredWidth(50);

        column[8] = jTableStockInEntry.getColumnModel().getColumn(8);
        column[8].setPreferredWidth(50);

//        column[9] = jTableStockInEntry.getColumnModel().getColumn(9);
//        column[9].setPreferredWidth(50);
        TableColumn hide0 = jTableStockInEntry.getColumnModel().getColumn(0);
        hide0.setMinWidth(0);
        hide0.setMaxWidth(0);
        hide0.setPreferredWidth(0);
        TableColumn hide1 = jTableStockInEntry.getColumnModel().getColumn(1);
        hide1.setMinWidth(0);
        hide1.setMaxWidth(0);
        hide1.setPreferredWidth(0);
        TableColumn hide2 = jTableStockInEntry.getColumnModel().getColumn(2);
        hide2.setMinWidth(0);
        hide2.setMaxWidth(0);
        hide2.setPreferredWidth(0);
        TableColumn hide7 = jTableStockInEntry.getColumnModel().getColumn(7);
        hide7.setMinWidth(0);
        hide7.setMaxWidth(0);
        hide7.setPreferredWidth(0);
        TableColumn hide8 = jTableStockInEntry.getColumnModel().getColumn(8);
        hide8.setMinWidth(0);
        hide8.setMaxWidth(0);
        hide8.setPreferredWidth(0);
        TableColumn hide9 = jTableStockInEntry.getColumnModel().getColumn(11);
        hide9.setMinWidth(0);
        hide9.setMaxWidth(0);
        hide9.setPreferredWidth(0);
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        if (e.getSource() == jTableStockInEntry) {
            if (e.getButton() == MouseEvent.BUTTON1) {
                if (e.getClickCount() == 1) {
                    int row = jTableStockInEntry.getSelectedRow();
                    if (row != -1) {
                        jButtonRemove.setEnabled(true);
                    }
                }
            }
        }
    }

    @Override
    public void mousePressed(MouseEvent e) {
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }

    public void addProductToTable() {
        try {
//"STOCK IN ID", "PRODUCT ID", "UNIT ID", "#", "UNIT", "PRODUCT", "QUANTITY", "BUYING PRICE UF", "SELLING PRICE UF", "BUYING PRICE", "SELLING PRICE", "LINE TOTAL UF", "LINE TOTAL"
            StockInDAOImpl stockINDAOImpl = new StockInDAOImpl();

            if (jTableStockInEntry.getRowCount() == 0) {
                tableModel.addRow(new Object[]{
                    stockINDAOImpl.getMaxIdForRef(),
                    aptt.getProductId(),
                    aptt.getUnitId(),
                    1,
                    aptt.getUnit(),
                    aptt.getProduct(),
                    aptt.getQuantity(),
                    aptt.getPriceBuying(),
                    aptt.getPriceSelling(),
                    df.format(Float.parseFloat(aptt.getPriceBuying())),
                    df.format(Float.parseFloat(aptt.getPriceSelling())),
                    (aptt.getQuantity() * Float.parseFloat(aptt.getPriceBuying())),
                    df.format((aptt.getQuantity() * Float.parseFloat(aptt.getPriceBuying())))});
//                jButtonNew.setEnabled(true);
//                jButtonHold.setEnabled(true);
//                jButtonPayment.setEnabled(true);
//                return;
            } else {
//                int sum = 0;
//                for (int i = 0; i < jTable1.getRowCount(); i++) {
//                    Object productIdl = jTable1.getValueAt(i, 0);
//                    int producId = Integer.parseInt(productIdl.toString());
//                    if (producId == motd.getId()) {
//                        edit quantity
//                        Object qtyFirstl = jTable1.getValueAt(i, 2);
//                        int qty = Integer.parseInt(qtyFirstl.toString());
//                        sum = qty + 1;
//                        jTable1.setValueAt(sum, i, 2);
//                        jTable1.setValueAt(df.format(sum * m.getPrice()), i, 4);
//                        jTable1.setValueAt(sum * m.getPrice(), i, 5);
//                        setMultipleOrder(true);
//
//                    }
//                }
                if (jTableStockInEntry.getRowCount() > 0) {
                    tableModel.addRow(new Object[]{
                        stockINDAOImpl.getMaxIdForRef(),
                        aptt.getProductId(),
                        aptt.getUnitId(),
                        1,
                        aptt.getUnit(),
                        aptt.getProduct(),
                        aptt.getQuantity(),
                        aptt.getPriceBuying(),
                        aptt.getPriceSelling(),
                        df.format(Float.parseFloat(aptt.getPriceBuying())),
                        df.format(Float.parseFloat(aptt.getPriceSelling())),
                        (aptt.getQuantity() * Float.parseFloat(aptt.getPriceBuying())),
                        df.format((aptt.getQuantity() * Float.parseFloat(aptt.getPriceBuying())))});
                }
            }
//
//            setMultipleOrder(false);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void autoCalulateTable() {
        try {
            float total = 0.0f;
            for (int i = 0; i < jTableStockInEntry.getRowCount(); i++) {
                float lineTotal = Float.parseFloat(jTableStockInEntry.getValueAt(i, 11).toString());
                total = total + lineTotal;

            }
            jLabelGrandTotal.setText(String.valueOf(df.format(total)));
        } catch (Exception e) {
            e.printStackTrace();
            System.err.println("error!!!!");
        }
    }

    private void saveStockInEntry() {
        //Add StockIn 
        StockInDAOImpl stockInDAOImpl = new StockInDAOImpl();
        stockInDAOImpl.getMaxId();
        ComboBoxList transporterId = (ComboBoxList) this.jComboBoxTransporter.getSelectedItem();
        Transporter t = new Transporter();
        t.setId(transporterId.getId());
        UserAccount u = new UserAccount();
        Long userId =jFrameSariPOS.userLogin.getId();
        u.setId(userId);
        StockIn stockIn = new StockIn(t, u);
        stockInDAOImpl.addStockIn(stockIn);

        //Add StockInEntry
//"STOCK IN ID", "PRODUCT ID", "UNIT ID", "#", "UNIT", "PRODUCT", "QUANTITY", "BUYING PRICE uf", "SELLING PRICE uf", "BUYING PRICE", "SELLING PRICE", "LINE TOTAL UF", "LINE TOTAL"
        StockInEntryDAOImpl stockInEntryImpl = new StockInEntryDAOImpl();

        for (int i = 0; i < jTableStockInEntry.getRowCount(); i++) {
            Long stockInId = Long.parseLong(jTableStockInEntry.getValueAt(i, 0).toString());
            Long productId = Long.parseLong(jTableStockInEntry.getValueAt(i, 1).toString());
            Long unitId = Long.parseLong(jTableStockInEntry.getValueAt(i, 2).toString());
            Float buyingPrice = Float.parseFloat(jTableStockInEntry.getValueAt(i, 7).toString());
            Float sellingPrice = Float.parseFloat(jTableStockInEntry.getValueAt(i, 8).toString());
            int qty = Integer.parseInt(jTableStockInEntry.getValueAt(i, 6).toString());
            for (int q = 0; q < qty; q++) {
                Product pr = new Product();
                pr.setId(productId);
                Unit un = new Unit();
                un.setId(unitId);
                StockInEntry stockInEntry = new StockInEntry();
                StockIn st = new StockIn();
//                st.setId(stockInDAOImpl.getMaxId());
                //undoned
                //ADD PROCESS DATA BEFORE ADDING STOCK-IN

                st.setId(stockInDAOImpl.getMaxIdForRef());
                stockInEntry.setPriceBuying(buyingPrice);
                stockInEntry.setPriceSelling(sellingPrice);
                stockInEntry.setUnit(un);
                stockInEntry.setProduct(pr);
                stockInEntry.setStockIn(st);
                com.aldrin.pos.model.Process process = new com.aldrin.pos.model.Process();
                process.setId(1L);
                stockInEntry.setProcess(process);
                stockInEntryImpl.addStockInEntry(stockInEntry);
            }
        }

    }

}
